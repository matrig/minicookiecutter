{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>This is a minimalistic Cookiecutter template that can be used to initiate a Python project. It supports the following features:</p> <ul> <li>uv for dependency management</li> <li>Code quality with ruff, mypy, deptry and prettier</li> <li>Testing with pytest</li> <li>Documentation with MkDocs</li> <li>Compatibility testing for multiple versions of Python with tox-uv</li> <li>GitHub Actions CI/CD with automated testing, documentation deployment, and security scanning</li> <li>Enterprise GitHub support with SSH-first authentication</li> </ul>"},{"location":"#quickstart","title":"Quickstart","text":"<p>On your local machine, navigate to the directory in which you want to create a project directory, and run the following command:</p> <pre><code>uvx cookiecutter https://github.com/matrig/minicookiecutter.git\n</code></pre> <p>or if you don't have <code>uv</code> installed yet:</p> <pre><code>pip install cookiecutter\ncookiecutter https://github.com/matrig/minicookiecutter.git\n</code></pre> <p>Follow the prompts to configure your project. You'll be asked about:</p> <ul> <li>github_actions [y/n]: Enable GitHub Actions CI/CD workflows</li> <li>codecov [y/n]: Enable Codecov integration for coverage reporting</li> <li>mkdocs [y/n]: Include MkDocs documentation setup</li> <li>git_repo [y/n]: Initialize git repository and optionally create remote</li> </ul> <p>Once completed, a new directory containing your project will be created. Then navigate into your newly created project directory and follow the instructions in the <code>README.md</code> to complete the setup of your project.</p>"},{"location":"#github-actions-features","title":"GitHub Actions Features","text":"<p>When you enable GitHub Actions (<code>github_actions: y</code>), your generated project gets enterprise-grade CI/CD:</p>"},{"location":"#continuous-integration","title":"\ud83d\ude80 Continuous Integration","text":"<ul> <li>Multi-Python testing (3.9-3.13) across Ubuntu, macOS, and Windows</li> <li>Automated code quality checks (ruff linting, formatting, mypy type checking)</li> <li>Coverage reporting with optional Codecov integration</li> </ul>"},{"location":"#documentation-deployment","title":"\ud83d\udcda Documentation Deployment","text":"<ul> <li>Automatic deployment to GitHub Pages when you push to main</li> <li>Seamless integration with MkDocs if enabled</li> </ul>"},{"location":"#security-scanning","title":"\ud83d\udd12 Security Scanning","text":"<ul> <li>CodeQL analysis for security vulnerabilities</li> <li>Dependency scanning with Safety</li> <li>Weekly automated security checks</li> </ul>"},{"location":"#professional-benefits","title":"\ud83d\udcc8 Professional Benefits","text":"<ul> <li>\u2705 Prevents broken code from being merged</li> <li>\u2705 Maintains high code quality standards</li> <li>\u2705 Automatically keeps documentation up-to-date</li> <li>\u2705 Monitors for security issues</li> <li>\u2705 Works with GitHub.com and GitHub Enterprise</li> </ul>"},{"location":"#acknowledgements","title":"Acknowledgements","text":"<p>This project is based on https://github.com/patrickmineault/true-neutral-cookiecutter and https://github.com/fpgmaas/cookiecutter-uv.</p>"},{"location":"prompt_arguments/","title":"Prompt arguments","text":"<p>When running the command <code>ccp</code> a prompt will start which enables you to configure your repository. The prompt values and their explanation are as follows:</p> <p>author</p> <p>Your full name.</p> <p>author_email</p> <p>Your email address associated with your github account.</p> <p>author_username</p> <p>Your github handle, i.e. <code>&lt;handle&gt;</code> in <code>https://github.com/&lt;handle&gt;</code>.</p> <p>project_name</p> <p>Your project name. Should be equal to the name of your repository and it should only contain alphanumeric characters and <code>-</code>'s.</p> <p>package_name</p> <p>The package name, will default to the <code>project_name</code> with all <code>-</code>'s replaced with <code>_</code>. This will be how you import your code later, e.g.</p> <pre><code>from &lt;package_nem&gt; import foo\n</code></pre> <p>Note: You can set <code>package_name</code> to <code>\"src\"</code> to place the Python module inside a <code>src</code> directory.</p> <p>project_description</p> <p>A short description of your project.</p> <p>git_repo</p> <p><code>\"y\"</code> or <code>\"n\"</code>. Whether you want to create a local git repo for the project.</p> <p>git_server</p> <p>In case you want to use another git service than github, you can specify it here. The default is <code>github.com</code>.</p> <p>mkdocs</p> <p><code>\"y\"</code> or <code>\"n\"</code>. Adds MkDocs documentation to your project. This includes automatically parsing your docstrings and adding them to the documentation. Documentation will be deployed to the <code>gh-pages</code> branch.</p> <p>github_actions</p> <p><code>\"y\"</code> or <code>\"n\"</code>. Adds GitHub Actions CI/CD workflows to your project. When enabled, your project gets:</p> <ul> <li>Continuous Integration: Automated testing across Python 3.9-3.13 and multiple operating systems (Ubuntu, macOS, Windows)</li> <li>Code Quality Checks: Automatic linting (ruff), formatting, and type checking (mypy)</li> <li>Documentation Deployment: Automatic deployment to GitHub Pages when MkDocs is also enabled</li> <li>Security Scanning: CodeQL analysis and dependency vulnerability scanning with weekly automated checks</li> </ul> <p>This adds <code>pytest-cov&gt;=4.0.0</code> to your dev dependencies for coverage reporting.</p> <p>codecov</p> <p><code>\"y\"</code> or <code>\"n\"</code>. Enables Codecov integration for coverage reporting. Only relevant if <code>github_actions</code> is also set to <code>\"y\"</code>. When enabled, your CI pipeline will automatically upload coverage reports to Codecov and provide coverage analysis on pull requests.</p>"},{"location":"tutorial/","title":"Tutorial","text":"<p>This page contains a complete tutorial on how to create your project.</p>"},{"location":"tutorial/#step-1-install-uv","title":"Step 1: Install uv","text":"<p>To start, we will need to install <code>uv</code>. The instructions to install uv can be found here. For MacOS or Linux;</p> <pre><code>curl -LsSf https://astral.sh/uv/install.sh | sh\n</code></pre>"},{"location":"tutorial/#step-2-generate-your-project","title":"Step 2: Generate your project","text":"<p>On your local machine, navigate to the directory in which you want to create a project directory, and run the following command:</p> <pre><code>uvx cookiecutter https://github.com/matrig/minicookiecutter.git\n</code></pre> <p>For an explanation of the prompt arguments, see Prompt Arguments.</p>"},{"location":"tutorial/#step-3-set-up-your-github-repository","title":"Step 3: Set up your Github repository","text":"<p>Create an empty new repository on Github. Give it a name that only contains alphanumeric characters and optionally <code>-</code>.</p>"},{"location":"tutorial/#step-4-upload-your-project-to-github","title":"Step 4: Upload your project to Github","text":"<p>Run the following commands:</p> <pre><code>cd {{cookiecutter.project_name}}\ngit init -b main\ngit add .\ngit commit -m \"Init commit\"\ngit remote add origin git@github.com:{{cookiecutter.author_github_handle}}/{{cookiecutter.project_name}}.git\ngit push -u origin main\n</code></pre>"},{"location":"tutorial/#step-5-set-up-your-development-environment","title":"Step 5: Set Up Your Development Environment","text":"<p>Install the environment with:</p> <pre><code>make install\n</code></pre> <p>This will generate the <code>uv.lock</code> file ``</p>"},{"location":"tutorial/#6-commit-the-changes","title":"6. Commit the changes","text":"<p>Now we commit the changes made by the two steps above to the repository:</p> <pre><code>git add .\ngit commit -m 'Fix formatting issues'\ngit push origin main\n</code></pre>"},{"location":"tutorial/#step-7-enable-your-documentation","title":"Step 7: Enable your documentation","text":"<p>To enable your documentation on GitHub, first navigate to <code>Settings &gt; Actions &gt; General</code> in your repository, and under <code>Workflow permissions</code> select <code>Read and write permissions</code>.</p> <p>Then navigate to <code>Settings &gt; Code and Automation &gt; Pages</code>. If you succesfully created a new release, you should see a notification saying <code>Your site is ready to be published at https://{{cookiecutter.author_github_handle}}.github.io/{{cookiecutter.project_name}}/</code>.</p> <p>To finalize deploying your documentation, under <code>Source</code>, select the branch <code>gh-pages</code>.</p>"},{"location":"tutorial/#step-8-youre-all-set","title":"Step 8: You're all set!","text":"<p>That's it! I hope this repository saved you a lot of manual configuration. If you have any improvement suggestions, feel free to raise an issue or open a PR on Github!</p>"},{"location":"features/linting/","title":"Linting and code quality","text":"<p>Code can be linted and quality-checked with the command</p> <pre><code>make check\n</code></pre> <p>Note that this requires the pre-commit hooks to be installed.</p> <p>This command will run the following tools:</p>"},{"location":"features/linting/#ruff","title":"ruff","text":"<p>ruff is used to lint and format the code, and it is configured through <code>pyproject.toml</code>:</p> <pre><code>[tool.ruff]\ntarget-version = \"py311\"\nline-length = 120\nfix = true\nselect = [\n    # flake8-2020\n    \"YTT\",\n    # flake8-bandit\n    \"S\",\n    # flake8-bugbear\n    \"B\",\n    # flake8-builtins\n    \"A\",\n    # flake8-comprehensions\n    \"C4\",\n    # flake8-debugger\n    \"T10\",\n    # flake8-simplify\n    \"SIM\",\n    # isort\n    \"I\",\n    # mccabe\n    \"C90\",\n    # pycodestyle\n    \"E\", \"W\",\n    # pyflakes\n    \"F\",\n    # pygrep-hooks\n    \"PGH\",\n    # pyupgrade\n    \"UP\",\n    # ruff\n    \"RUF\",\n    # tryceratops\n    \"TRY\",\n]\nignore = [\n    # LineTooLong\n    \"E501\",\n    # DoNotAssignLambda\n    \"E731\",\n]\n\n[tool.ruff.format]\npreview = true\n\n[tool.ruff.per-file-ignores]\n\"tests/*\" = [\"S101\"]\n</code></pre>"},{"location":"features/linting/#mypy","title":"mypy","text":"<p>mypy is used for static type checking, and it's configuration and can be edited in <code>pyproject.toml</code>.</p> <pre><code>[tool.mypy]\ndisallow_untyped_defs = true\ndisallow_any_unimported = true\nno_implicit_optional = true\ncheck_untyped_defs = true\nwarn_return_any = true\nwarn_unused_ignores = true\nshow_error_codes = true\nexclude = [\n    '\\.venv',\n    '{{cookiecutter.project_name}}',\n    'tests'\n]\n</code></pre>"},{"location":"features/linting/#deptry","title":"deptry","text":"<p>deptry is used to check the code for dependency issues, and it can be configured by adding a <code>[tool.deptry]</code> section in <code>pyproject.toml</code>. For more information, see this section documentation of deptry.</p>"},{"location":"features/linting/#prettier","title":"Prettier","text":"<p>Prettier is used to format the markdown documentation, along with any json and yaml files. Its options can be configured in the included <code>.editorconfig</code> file or in greater detail by adding a <code>.prettierrc</code> file (See Docs).</p> <pre><code>[*]\nmax_line_length = 120\n\n[*.json]\nindent_style = space\nindent_size = 4\n</code></pre>"},{"location":"features/linting/#github-actions","title":"Github Actions","text":"<p>If <code>include_github_actions</code> is set to <code>\"y\"</code>, code formatting is checked for every merge request, every merge to main, and every release.</p>"},{"location":"features/makefile/","title":"Makefile","text":"<p>The generated repository will have a <code>Makefile</code> available. A list of all available commands that are available can be obtained by running <code>make help</code> in the terminal. Initially, if all features are selected, the following commands are available:</p> <pre><code>install              Install the uv environment and install the pre-commit hooks\ncheck                Lint and check code by running ruff, mypy and deptry.\ntest                 Test the code with pytest\nbuild                Build wheel file using uv\nclean-build          clean build artifacts\ndocs-test            Test if documentation can be built without warnings or errors\ndocs                 Build and serve the documentation\ndocs-deploy          Deploy the documentation to a branch gh-pages for GitHub pages\n</code></pre>"},{"location":"features/mkdocs/","title":"Documentation with MkDocs","text":"<p>If <code>mkdocs</code> is set to <code>\"y\"</code>, documentation of your project is automatically added using MkDocs. The documentation can then be deployed to your <code>gh-pages</code> branch, and made available at <code>https://&lt;github_handle&gt;.github.io/&lt;project_name&gt;/</code> by using the command</p> <pre><code>make docs-deploy\n</code></pre> <p>(which will deploy the project pages to a branch called <code>gh-pages</code>), and following the instructions below on how to enable the documentation on GitHub.</p> <p>To view the documentation locally, simply run</p> <pre><code>make docs\n</code></pre> <p>This command will generate and build your documentation, and start the server locally so you can access it at http://localhost:8000.</p>"},{"location":"features/mkdocs/#enabling-the-documentation-on-github","title":"Enabling the documentation on GitHub","text":"<p>To enable your documentation on GitHub, in your repository, navigate to <code>Settings &gt; Code and Automation &gt; Pages</code>. Then, under <code>Branch</code>, select the branch <code>gh-pages</code> and <code>/(root)</code>. Your documentation should then be live within a few minutes.</p>"},{"location":"features/mkdocs/#documenting-docstrings","title":"Documenting docstrings","text":"<p>The generated project also converts all your docstrings into legible documentation. By default, the project is configured to work with google style docstrings.</p> <p>An example of a Google style docstring:</p> <pre><code>def function_with_pep484_type_annotations(param1: int, param2: str) -&gt; bool:\n\"\"\"Example function with PEP 484 type annotations.\n\nArgs:\n    param1: The first parameter.\n    param2: The second parameter.\n\nReturns:\n    The return value. True for success, False otherwise.\n</code></pre> <p>For more examples, see here.</p>"},{"location":"features/pytest/","title":"Unittesting with Pytest","text":"<p>pytest is automatically added to the environment. There will be a template unittest in the <code>tests</code> directory upon creation of the project, which can be run with</p> <pre><code>make test\n</code></pre>"},{"location":"features/tox/","title":"Compatibility testing with Tox","text":"<p>If <code>tox</code> is set to <code>\"y\"</code> project uses tox-uv to test compatibility with multiple Python versions. You can run <code>tox</code> locally:</p> <pre><code>uv run tox\n</code></pre> <p>By default, the project is tested with Python <code>3.8</code>, <code>3.9</code>, and <code>3.10</code>, <code>3.11</code> and <code>3.12</code>.</p> <p>Testing for compatibility with different Python versions is also done automatically in the CI/CD pipeline on every pull request, merge to main, and on each release.</p> <p>If you want to test for compatbility with more Python versions you can simply add them to <code>tox.ini</code> and to the separate workflows in <code>.github</code>.</p>"},{"location":"features/uv/","title":"Dependency management with uv","text":"<p>The generated repository will uses uv for its dependency management. When you have created your repository using this cookiecutter template, a uv environment is pre-configured in <code>pyproject.toml</code>. All you need to do is add your project-specific dependencies with</p> <pre><code>uv add &lt;package&gt;\n</code></pre> <p>and then install the environment with</p> <pre><code>uv sync\n</code></pre> <p>You can then run commands within your virtual environment, for example:</p> <pre><code>uv run python -m pytest\n</code></pre>"}]}